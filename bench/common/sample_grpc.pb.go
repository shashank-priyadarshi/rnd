// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: sample.proto

// package name for generated go proto code

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Benchmarking_Bidirectional_FullMethodName = "/common.Benchmarking/Bidirectional"
)

// BenchmarkingClient is the client API for Benchmarking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkingClient interface {
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Benchmarking_BidirectionalClient, error)
}

type benchmarkingClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkingClient(cc grpc.ClientConnInterface) BenchmarkingClient {
	return &benchmarkingClient{cc}
}

func (c *benchmarkingClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Benchmarking_BidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &Benchmarking_ServiceDesc.Streams[0], Benchmarking_Bidirectional_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkingBidirectionalClient{stream}
	return x, nil
}

type Benchmarking_BidirectionalClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type benchmarkingBidirectionalClient struct {
	grpc.ClientStream
}

func (x *benchmarkingBidirectionalClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *benchmarkingBidirectionalClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BenchmarkingServer is the server API for Benchmarking service.
// All implementations must embed UnimplementedBenchmarkingServer
// for forward compatibility
type BenchmarkingServer interface {
	Bidirectional(Benchmarking_BidirectionalServer) error
	mustEmbedUnimplementedBenchmarkingServer()
}

// UnimplementedBenchmarkingServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkingServer struct {
}

func (UnimplementedBenchmarkingServer) Bidirectional(Benchmarking_BidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidirectional not implemented")
}
func (UnimplementedBenchmarkingServer) mustEmbedUnimplementedBenchmarkingServer() {}

// UnsafeBenchmarkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkingServer will
// result in compilation errors.
type UnsafeBenchmarkingServer interface {
	mustEmbedUnimplementedBenchmarkingServer()
}

func RegisterBenchmarkingServer(s grpc.ServiceRegistrar, srv BenchmarkingServer) {
	s.RegisterService(&Benchmarking_ServiceDesc, srv)
}

func _Benchmarking_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BenchmarkingServer).Bidirectional(&benchmarkingBidirectionalServer{stream})
}

type Benchmarking_BidirectionalServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type benchmarkingBidirectionalServer struct {
	grpc.ServerStream
}

func (x *benchmarkingBidirectionalServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *benchmarkingBidirectionalServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Benchmarking_ServiceDesc is the grpc.ServiceDesc for Benchmarking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Benchmarking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.Benchmarking",
	HandlerType: (*BenchmarkingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bidirectional",
			Handler:       _Benchmarking_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sample.proto",
}
